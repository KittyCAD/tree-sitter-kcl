==================
Assignment
==================

w = 3.1415

---

(kcl_program
	(body_item
		(variable_declaration
			(non_fn_definition
				(identifier)
				(number)
			)
		)
	)
)

==================
Bool assignment
==================

w = true

---

(kcl_program
	(body_item
		(variable_declaration
			(non_fn_definition
				(identifier)
				(boolean)
			)
		)
	)
)

==================
String assignment
==================

name = "abc"

---

(kcl_program
	(body_item
		(variable_declaration
			(non_fn_definition
				(identifier)
				(string)
			)
		)
	)
)

==================
Function definition
==================

fn f() {
	x = "abc"
	y = "abc"
	return x
}

---

(kcl_program
	(body_item
		(variable_declaration
			(fn_definition
				(identifier)
				(body_item
					(variable_declaration
						(non_fn_definition
							(identifier)
							(string)
						)
					)
				)
				(body_item
					(variable_declaration
						(non_fn_definition
							(identifier)
							(string)
						)
					)
				)
				(body_item
					(return_stmt
						(identifier)
					)
				)
			)
		)
	)
)

==================
Basic math
==================

val = 1 + 2

---

(kcl_program
	(body_item
		(variable_declaration
			(non_fn_definition
				(identifier)
				(binary_expr
				  lhs: (number)
				  operator: (binary_operator)
				  rhs: (number)
				)
			)
		)
	)
)


==================
Arrays
==================

point = [0, 0]

---

(kcl_program
	(body_item
		(variable_declaration
			(non_fn_definition
				(identifier)
				(array_expr
					(number)
					(number)
				)
			)
		)
	)
)


==================
Chaining math
==================

val = 1 + 2 / 4

---

(kcl_program
	(body_item
		(variable_declaration
			(non_fn_definition
				(identifier)
				(binary_expr
				  lhs: (number)
				  operator: (binary_operator)
				  rhs: (binary_expr
				    lhs: (number)
					operator: (binary_operator)
				    rhs: (number)
				  )
				)
			)
		)
	)
)

==================
Function call
==================

f(1, x = 10)
yLine(length = diameter)

---

(kcl_program
	(body_item
		(expr_stmt
			(fn_call
				callee: (identifier)
				unlabeledArg: (number)
				(labeledArg
					label: (identifier)
					arg: (number)
				)
			)
		)
	)
	(body_item
		(expr_stmt
			(fn_call
				callee: (identifier)
				(labeledArg
					label: (identifier)
					arg: (identifier)
				)
			)
		)
	)
)

==================
Pipes
==================

val = 1 |> f(%)

---

(kcl_program
	(body_item
		(variable_declaration
			(non_fn_definition
				(identifier)
				(binary_expr
				  lhs: (number)
				  operator: (binary_operator)
				  rhs: (fn_call callee: (identifier) unlabeledArg: (pipe_sub))
				)
			)
		)
	)
)


==================
Imports
==================

import "tests/inputs/cube.obj"

---

(kcl_program
	(body_item
		(import_stmt
			(string)
		)
	)
)


==================
Import with as
==================

import "tests/inputs/cube.obj" as cube

---

(kcl_program
	(body_item
		(import_stmt
			(string)
			(identifier)
		)
	)
)

